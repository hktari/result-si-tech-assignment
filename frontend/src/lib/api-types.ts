/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new user */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["AuthController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all activities for the current user */
        get: operations["ActivitiesController_findAll"];
        put?: never;
        /** Create a new activity */
        post: operations["ActivitiesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activities/today": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get today's activities */
        get: operations["ActivitiesController_getTodayActivities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activities/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get activity title suggestions */
        get: operations["ActivitiesController_getSuggestions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific activity */
        get: operations["ActivitiesController_findOne"];
        put?: never;
        post?: never;
        /** Delete an activity */
        delete: operations["ActivitiesController_remove"];
        options?: never;
        head?: never;
        /** Update an activity */
        patch: operations["ActivitiesController_update"];
        trace?: never;
    };
    "/insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get activity insights and analytics data */
        get: operations["InsightsController_getInsights"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginDto: {
            /** @example user@example.com */
            email: string;
            /** @example password123 */
            password: string;
        };
        UserResponseDto: {
            /** @description User ID */
            id: string;
            /** @description User email */
            email: string;
            /** @description User name */
            name?: string;
            /**
             * Format: date-time
             * @description Account creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        LoginResponseDto: {
            /** @description JWT access token */
            access_token: string;
            /** @description User information */
            user: components["schemas"]["UserResponseDto"];
        };
        RegisterDto: {
            /** @example John Doe */
            name: string;
            /** @example user@example.com */
            email: string;
            /** @example password123 */
            password: string;
        };
        RegisterResponseDto: {
            /** @description Success message */
            message: string;
            /** @description Created user information */
            user: components["schemas"]["UserResponseDto"];
        };
        CreateActivityDto: {
            /** @example Reading */
            title: string;
            /** @example Reading technical books */
            description?: string;
            /**
             * @description Duration in minutes
             * @example 60
             */
            duration: number;
            /** @example 2025-07-16T10:00:00Z */
            timestamp?: string;
        };
        ActivityResponseDto: {
            /** @description Activity ID */
            id: string;
            /** @description Activity title */
            title: string;
            /** @description Activity description */
            description?: string;
            /** @description Activity duration in minutes */
            duration: number;
            /**
             * Format: date-time
             * @description Activity timestamp
             */
            timestamp: string;
            /** @description User ID who created the activity */
            userId: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
        };
        ActivitiesListResponseDto: {
            /** @description List of activities */
            activities: components["schemas"]["ActivityResponseDto"][];
            /** @description Total number of activities */
            total: number;
        };
        ActivitySuggestionResponseDto: {
            /** @description Suggested activity title */
            title: string;
            /** @description Number of times this activity was used */
            count: number;
        };
        UpdateActivityDto: {
            /** @example Reading */
            title?: string;
            /** @example Reading technical books */
            description?: string;
            /**
             * @description Duration in minutes
             * @example 60
             */
            duration?: number;
            /** @example 2025-07-16T10:00:00Z */
            timestamp?: string;
        };
        DeleteActivityResponseDto: {
            /** @description Success message */
            message: string;
            /** @description Deleted activity ID */
            id: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description User logged in successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponseDto"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponseDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    ActivitiesController_findAll: {
        parameters: {
            query?: {
                /** @description Search in title and description */
                search?: string;
                /** @description Number of activities to return */
                limit?: string;
                /** @description Number of activities to skip */
                offset?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Activities retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivitiesListResponseDto"];
                };
            };
        };
    };
    ActivitiesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateActivityDto"];
            };
        };
        responses: {
            /** @description Activity created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityResponseDto"];
                };
            };
        };
    };
    ActivitiesController_getTodayActivities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Today's activities retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityResponseDto"][];
                };
            };
        };
    };
    ActivitiesController_getSuggestions: {
        parameters: {
            query?: {
                /** @description Query for title suggestions */
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Activity suggestions retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivitySuggestionResponseDto"][];
                };
            };
        };
    };
    ActivitiesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Activity retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityResponseDto"];
                };
            };
            /** @description Activity not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ActivitiesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Activity deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteActivityResponseDto"];
                };
            };
            /** @description Activity not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ActivitiesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateActivityDto"];
            };
        };
        responses: {
            /** @description Activity updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityResponseDto"];
                };
            };
            /** @description Activity not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InsightsController_getInsights: {
        parameters: {
            query: {
                /** @description Metric type for insights */
                metric: "timePerTitle" | "timePerTitleStacked";
                start?: string;
                end?: string;
                interval?: "daily" | "weekly" | "monthly";
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
